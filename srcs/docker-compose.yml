# --- containers ---

services:

  # mariadb container is independent of below containers and is therefore created first
  mariadb:
    container_name: mariadb
    build: ./requirements/mariadb/
    volumes:
      - database:/var/lib/mysql/
    networks:
      - all
    init: true
    restart: on-failure
    env_file:
      - .env

  # wordpress container depends on the mariadb container and is therefore created second
  wordpress:
    container_name: wordpress
    build: ./requirements/wordpress/
    volumes:
      - wordpress_files:/var/www/inception/
    networks:
      - all
    init: true
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - mariadb

  # nginx container depends on the wordpress container
  # it uses args to pass the certificate and key path to the Dockerfile
  # this allows the Dockerfile to access the private information stored in the .env file
  nginx:
    container_name: nginx
    build:
      context: ./requirements/nginx/
      args:
        CERTIFICATE_FOLDER: ${CERTIFICATE_FOLDER}
        CERTIFICATE: ${CERTIFICATE}
        KEY: ${KEY}
        COUNTRY: ${COUNTRY}
        STATE: ${STATE}
        LOCALITY: ${LOCALITY}
        ORGANIZATION: ${ORGANIZATION}
        UNIT: ${UNIT}
        DOMAIN_NAME: ${DOMAIN_NAME}
    ports:
      - '443:443'
    volumes:
      - wordpress_files:/var/www/inception/
    networks:
      - all
    init: true
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - wordpress


# --- volumes ---

# keep the data shared between the containers
# act as a shared volume, allowing data to be accessed by multiple containers and the host machine
# device: specifies the location on the host machine where the data will be stored
volumes:

  # keeps the database
  database:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/data/database

  # keeps the wordpress files
  wordpress_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/data/wordpress_files


# --- networks ---

# this network is used to connect the containers
# it acts like a virtual switch between the containers
# "all" is the name of the network
# "bridge" is the type of the network
networks:
  all:
    driver: bridge
